1688. Count of Matches in Tournament

class Solution {
public:
    int numberOfMatches(int n) {
        // (i) Baby Solution:

        // return n-1;



        // (ii) Math Approach:

        if(n == 1){
            return 0;
        }
        if(n % 2 == 0){
            return n/2 + numberOfMatches(n/2);
        }
        else{
            return (n-1)/2 + numberOfMatches((n-1)/2 + 1);
        }
    }
};

2951. Find the Peaks

class Solution {
public:
    vector<int> findPeaks(vector<int>& mountain) {
        int n = mountain.size();
        vector<int> ans;
        for(int i = 1; i < n-1; i++){
            if(mountain[i] > mountain[i-1] && mountain[i] > mountain[i+1]){
                ans.push_back(i);
            }
        }
        return ans;
    }
};


1716. Calculate Money in Leetcode Bank

class Solution {
public:
    int totalMoney(int n) {
        int sum = 0;
        vector<int> dp(n+1);

        //base case:
        dp[0] = 0;

        for(int i = 1; i <=n; i++){
            if(i <= 7){
                dp[i] = 1 + dp[i-1];
            }
            else{
                dp[i] = 1 + dp[i-7];
            }
        }
        for(int nums : dp){
            sum = sum + nums;
        }
        return sum;
    }
};


1160. Find Words That Can Be Formed by Characters

class Solution {
public:
    // Function to count characters in words that can be formed from chars
    int countCharacters(vector<string>& words, string chars) {
        // Array to store the count of characters in chars
        vector<int> charCount(26, 0);

        // Count the occurrence of each character in chars
        for(char &ch : chars){
            charCount[ch - 'a']++;
        }

        // Variable to store the total length of valid words
        int ans = 0;

        // Iterate through each word in the vector
        for(string &word : words){
            // Array to store the count of characters in the current word
            vector<int> wordCount(26, 0);

            // Count the occurrence of each character in the current word
            for(char &ch : word){
                wordCount[ch - 'a']++;
            }

            // Check if the current word can be formed from chars
            bool isPossibleWord = true;
            for(int i = 0; i < 26; i++){
                if(wordCount[i] > charCount[i]){
                    // If any character occurs more in the word than in chars, it's not possible
                    isPossibleWord = false;
                    break;
                }
            }

            // If the current word is possible, add its length to the total
            if(isPossibleWord == true){
                ans = ans + word.size();
            }
        }

        // Return the total length of valid words
        return ans;
    }
};


606. Construct String from Binary Tree

class Solution {
public:
    // Function to recursively build the string representation of the tree
    string buildTree(TreeNode *root){
        // Base case: If the current node is NULL, return an empty string
        if(root == NULL){
            return "";
        }
        // If the current node is a leaf node (no left or right child), return its value as a string
        if(root->left == NULL && root->right == NULL){
            return to_string(root->val) ;
        }
        // If the current node has no right child, include only the left subtree in the representation
        if(root->right == NULL){
            return to_string(root->val) + "(" + buildTree(root->left) + ")";
        }
        // Include both left and right subtrees in the representation
        return to_string(root->val) + "(" + buildTree(root->left) + ")" + "(" + buildTree(root->right) + ")";
    }
    
    // Main function to convert a binary tree to a string
    string tree2str(TreeNode* root) {
        return buildTree(root);
    }
};


867. Transpose Matrix

class Solution {
public:
    vector<std::vector<int>> transpose(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        //creating an auxiliary matrix (m X n)
        vector<vector<int>> ans(m, vector<int>(n));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                ans[j][i] = matrix[i][j];  // Swap indices to transpose the matrix
            }
        }
        return ans;
    }
};

1287. Element Appearing More Than 25% In Sorted Array

class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int qtr = n/4;   //25%
        int range = (n-qtr);

        for(int i = 0; i < range; i++){
            if(arr[i] == arr[i + qtr]){
                return arr[i];
            }
        }
        return 0;
    }
};


1464. Maximum Product of Two Elements in an Array

// // Brutte Force Method:

// class Solution {
// public:
//     int maxProduct(vector<int>& nums) {
//         int n = nums.size();
//         int ans = 0;
//         // sort(nums.begin(), nums.end()); 
//         for(int i = 0 ; i <n; i++){
//             for(int j = i+1; j < n; j++){
//                 ans = max(ans, (nums[i] - 1) * (nums[j] - 1));
//             }

//         }
//         return ans;
//     }
// };



// Sorting Method:

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end()); 
        
        int x = nums[n - 1]; // Get the largest element
        int y = nums[n - 2]; // Get the second largest element
        
        return (x - 1) * (y - 1); // Return the product of (largest - 1) * (second largest - 1)
    }
};

1582. Special Positions in a Binary Matrix

class Solution {
public:
    int numSpecial(vector<vector<int>>& mat) {
        int row = mat.size();
        int col = mat[0].size();
        int count = 0;

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(mat[i][j] == 1){
                    int rowSum = 0;
                    int colSum = 0;

                    // Check row
                    for(int k = 0; k < col; k++){
                        rowSum += mat[i][k];
                    }

                    // Check column
                    for(int k = 0; k < row; k++){
                        colSum += mat[k][j];
                    }

                    // If the sum in the row and column is 1 (current position is the only 1)
                    if(rowSum == 1 && colSum == 1){
                        count++;
                    }
                }
            }
        }
        return count;
    }
};


1486. XOR Operation in an Array

class Solution {
public:
    int xorOperation(int n, int start) {
        int arr[n];
        int ans = 0;
        for(int i = 0; i < n; i++){
            arr[i] = start + 2 * i;
            ans = ans ^ arr[i];
        }
        return ans;
    }
};


179. Largest Number

class Solution {
public:
    bool static compare(int a, int b){
        string s1 = to_string(a);
        string s2 = to_string(b);

        return s1+s2 > s2+s1;
    }

    string largestNumber(vector<int>& nums) {
        int n  = nums.size();
        sort(nums.begin(), nums.end(), compare);
        string ans;

        for(int i = 0; i < n; i++){
            ans = ans + to_string(nums[i]);
            
            //edge case:
            if(ans[0] == '0'){
                return "0";
            }
        }
        return ans;
    }
};

412. Fizz Buzz

class Solution {
public:
    vector<string> fizzBuzz(int n) {
       vector<string> ans;

        for(int i = 1; i <= n; i++){
            
            if(i % 3 == 0 && i % 5 == 0){
               ans.push_back("FizzBuzz");
            }
            else if(i % 3 == 0){
               ans.push_back("Fizz");
            }
            else if(i % 5 == 0){
               ans.push_back("Buzz");
            }
            else{
               ans.push_back(to_string(i));
            }
        } 
        return ans;
    }
};

1436. Destination City

class Solution {
public:
    string destCity(vector<vector<string>>& paths) {
      int n  = paths.size();

        unordered_map<string,vector<string>>indegree;
        
        for(auto ele:paths){
          indegree[ele[0]].push_back(ele[1]);
        }
        for(auto ele:paths){
          if(indegree[ele[0]].size() == 0) return ele[0];
          if(indegree[ele[1]].size() == 0) return ele[1];
        }
        return "null";
    }
};


242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
        //base case:
        if(s.size() != t.size()){
            return false;
        }
        int i = 0;
        int j = 0;

        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        while(i < s.size() && j < t.size()){
            if(s[i] != t[j]){
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
};


Code

1266. Minimum Time Visiting All Points

class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
        int n = points.size();
        int ans = 0;

        // start from (i=1) and take (i=0) as initial starting point...
        for(int i = 1; i < n; i++){
            ans += max(abs(points[i][0] - points[i-1][0]), abs(points[i][1] - points[i-1][1]));  // x-y
        }
        return ans;
    }
};

1913. Maximum Product Difference Between Two Pairs

class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
    sort(nums.begin(),nums.end());
    return nums[nums.size()-1]*nums[nums.size()-2]-nums[0]*nums[1];
    }
};

661. Image Smoother

class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int row = img.size();
        int col = img[0].size();

        vector<vector<int>> ans(row, vector<int>(col, 0));

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){

                int count = 1;
                int sum = img[i][j];

                if(j+1<col){
                    sum+=img[i][j+1];
                    count++;
                }

                if(i+1<row && j+1<col){
                    sum += img[i+1][j+1];
                    count++;
                }

                if(i+1<row){
                    sum+=img[i+1][j];
                    count++;
                }

                if(i+1<row && j-1>=0){
                    sum +=img[i+1][j-1];
                    count++;
                }

                if(j-1>=0){
                    sum+=img[i][j-1];
                    count++;
                }

                if(i-1>=0 && j-1>=0){
                    sum += img[i-1][j-1];
                    count++;
                }

                if(i-1>=0){
                    sum+=img[i-1][j];
                    count++;
                }

                if(i-1>=0 && j+1<col){
                    sum += img[i-1][j+1];
                    count++;
                }

                int average = sum/count;
                ans[i][j] = average;
            }
        }
        return ans;
    }
};

2706. Buy Two Chocolates

class Solution {
public:
    int buyChoco(vector<int>& prices, int money) {
        int n = prices.size();
        sort(prices.begin(), prices.end());

        for(int i = 0; i < n; i++){
            if(prices[i] + prices[i+1] <= money){
                return (money - (prices[0] + prices[1]));
            }
            else{
                return money;
            }
        }
        return money;
    }
};

29. Divide Two Integers

class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend == INT_MIN && divisor == -1){
            return INT_MAX;
        }
        return dividend/divisor;
    }
};

1637. Widest Vertical Area Between Two Points Containing No Points

class Solution {
public:
    int maxWidthOfVerticalArea(vector<vector<int>>& points) {
        sort(points.begin(), points.end());

        int ans = 0;
        for(int i = 1; i < points.size(); i++){
            ans = max(ans, points[i][0] - points[i-1][0]);
        }
        return ans;
    }
};

1422. Maximum Score After Splitting a String

class Solution {
public:
    int maxScore(string s) {
        int n = s.size();
        int maxi = 0;

        int count0 = 0;                 // 0 count
        for(int i = 0; i < n-1;i++){
            if(s[i] == '0'){
                count0++;
            }
            int count1 = 0;                 // 1 count
            for(int j = i+1; j < n; j++){
                if(s[j] == '1'){
                    count1++;
                }
            }
            
        int total = count0 + count1;   // 1 count + 0 count
        if(total > maxi){
            maxi = total;
        }    
    }
    return maxi;
    }
};

1496. Path Crossing

class Solution {
public:
    bool isPathCrossing(string path) {
        int n = path.size();
        set<pair<int, int>> s;
        int x = 0;
        int y = 0;

        s.insert({0, 0});
        for(int i = 0; i < n; i++){
            if(path[i] == 'N'){
                y++;
            }
            else if(path[i] == 'E'){
                x++;
            }
            else if(path[i] == 'S'){
                y--;
            }
            else if(path[i] == 'W'){
                x--;
            }
            
            if(s.count({x, y}) != 0){
                return true;
            }
            s.insert({x, y});
        }
        return false;
    }
};

1758. Minimum Changes To Make Alternating Binary String

class Solution {
public:
    int minOperations(string s) {
        int n = s.size();
        
        int matchCount = 0;
        int unmatchCount = 0;


        for(int i = 0; i < n; i++){
            if(s[i] - '0' == i%2){
                matchCount++;
            }
            else{
                unmatchCount++;
            }
        }
        return min(matchCount, unmatchCount);
    }
};

91. Decode Ways

class Solution {
public:
    int solve(int i, string &s, int &n, vector<int> &dp){
        if(i == n){
            return 1; // out of bound (>26)
        }
        if(s[i] == '0'){
            return 0;  // no split
        }
        if(dp[i] != -1){
            return dp[i];
        }

        int ans = solve(i+1, s, n, dp);

        if(i+1 < n){          // overflow check
            if(s[i] == '1' || (s[i] == '2' && s[i+1] <= '6')){   // 1_ or <=26 condition check
                ans += solve(i+2, s, n, dp);
            }   
        }
        return dp[i] = ans;
    }

    int numDecodings(string s) {
        int n = s.size();
        vector<int> dp(n+1, -1);

        return solve(0, s, n, dp);
    }
};

1155. Number of Dice Rolls With Target Sum

class Solution {
public:
    // (i) Recursion + Memoization:
    int solve(int dice, int face, int target, vector<vector<int>> &dp){
        //base case:
        if(target < 0){
            return 0;
        }
        if(dice == 0 && target != 0){
            return 0;
        }
        if(dice != 0 && dice == 0){
            return 0;
        }
        if(dice == 0 && target == 0){
            return 1;
        }

        if(dp[dice][target] != -1){
            return dp[dice][target];
        }

        int ans = 0;
        for(int i = 1; i <= face; i++){
            ans = (ans + solve(dice-1, face, target-i, dp)) % 1000000007;        
        }
        return dp[dice][target] = ans;
    }

    // (ii) Tabulation:
    int solveTab(int d, int f, int t){
    vector<vector<int>> dp(d + 1, vector<int> (t + 1, 0));
    dp[0][0] = 1;  //base case

    for(int dice = 1; dice <= d; dice++){
        for(int target = 1; target <= t; target++){

            int ans = 0;
            for(int i = 1; i <= f; i++){
                if(target - i >= 0){          //check for valid index
                    ans = (ans + dp[dice-1][target - i]) % 1000000007;        
                }
            }
            dp[dice][target] = ans;
        }
    }
    return dp[d][t];
}

    int numRollsToTarget(int n, int k, int target){
        vector<vector<int>> dp(n + 1, vector<int> (target + 1, -1));
        return solve(n, k, target, dp);


        return solveTab(n, k, target);
    }
};
