1688. Count of Matches in Tournament

class Solution {
public:
    int numberOfMatches(int n) {
        // (i) Baby Solution:

        // return n-1;



        // (ii) Math Approach:

        if(n == 1){
            return 0;
        }
        if(n % 2 == 0){
            return n/2 + numberOfMatches(n/2);
        }
        else{
            return (n-1)/2 + numberOfMatches((n-1)/2 + 1);
        }
    }
};


2951. Find the Peaks

class Solution {
public:
    vector<int> findPeaks(vector<int>& mountain) {
        int n = mountain.size();
        vector<int> ans;
        for(int i = 1; i < n-1; i++){
            if(mountain[i] > mountain[i-1] && mountain[i] > mountain[i+1]){
                ans.push_back(i);
            }
        }
        return ans;
    }
};


1716. Calculate Money in Leetcode Bank

class Solution {
public:
    int totalMoney(int n) {
        int sum = 0;
        vector<int> dp(n+1);

        //base case:
        dp[0] = 0;

        for(int i = 1; i <=n; i++){
            if(i <= 7){
                dp[i] = 1 + dp[i-1];
            }
            else{
                dp[i] = 1 + dp[i-7];
            }
        }
        for(int nums : dp){
            sum = sum + nums;
        }
        return sum;
    }
};


1160. Find Words That Can Be Formed by Characters

class Solution {
public:
    // Function to count characters in words that can be formed from chars
    int countCharacters(vector<string>& words, string chars) {
        // Array to store the count of characters in chars
        vector<int> charCount(26, 0);

        // Count the occurrence of each character in chars
        for(char &ch : chars){
            charCount[ch - 'a']++;
        }

        // Variable to store the total length of valid words
        int ans = 0;

        // Iterate through each word in the vector
        for(string &word : words){
            // Array to store the count of characters in the current word
            vector<int> wordCount(26, 0);

            // Count the occurrence of each character in the current word
            for(char &ch : word){
                wordCount[ch - 'a']++;
            }

            // Check if the current word can be formed from chars
            bool isPossibleWord = true;
            for(int i = 0; i < 26; i++){
                if(wordCount[i] > charCount[i]){
                    // If any character occurs more in the word than in chars, it's not possible
                    isPossibleWord = false;
                    break;
                }
            }

            // If the current word is possible, add its length to the total
            if(isPossibleWord == true){
                ans = ans + word.size();
            }
        }

        // Return the total length of valid words
        return ans;
    }
};


606. Construct String from Binary Tree

class Solution {
public:
    // Function to recursively build the string representation of the tree
    string buildTree(TreeNode *root){
        // Base case: If the current node is NULL, return an empty string
        if(root == NULL){
            return "";
        }
        // If the current node is a leaf node (no left or right child), return its value as a string
        if(root->left == NULL && root->right == NULL){
            return to_string(root->val) ;
        }
        // If the current node has no right child, include only the left subtree in the representation
        if(root->right == NULL){
            return to_string(root->val) + "(" + buildTree(root->left) + ")";
        }
        // Include both left and right subtrees in the representation
        return to_string(root->val) + "(" + buildTree(root->left) + ")" + "(" + buildTree(root->right) + ")";
    }
    
    // Main function to convert a binary tree to a string
    string tree2str(TreeNode* root) {
        return buildTree(root);
    }
};


867. Transpose Matrix

class Solution {
public:
    vector<std::vector<int>> transpose(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        //creating an auxiliary matrix (m X n)
        vector<vector<int>> ans(m, vector<int>(n));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                ans[j][i] = matrix[i][j];  // Swap indices to transpose the matrix
            }
        }
        return ans;
    }
};

1287. Element Appearing More Than 25% In Sorted Array

class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int qtr = n/4;   //25%
        int range = (n-qtr);

        for(int i = 0; i < range; i++){
            if(arr[i] == arr[i + qtr]){
                return arr[i];
            }
        }
        return 0;
    }
};


1464. Maximum Product of Two Elements in an Array

// // Brutte Force Method:

// class Solution {
// public:
//     int maxProduct(vector<int>& nums) {
//         int n = nums.size();
//         int ans = 0;
//         // sort(nums.begin(), nums.end()); 
//         for(int i = 0 ; i <n; i++){
//             for(int j = i+1; j < n; j++){
//                 ans = max(ans, (nums[i] - 1) * (nums[j] - 1));
//             }

//         }
//         return ans;
//     }
// };



// Sorting Method:

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end()); 
        
        int x = nums[n - 1]; // Get the largest element
        int y = nums[n - 2]; // Get the second largest element
        
        return (x - 1) * (y - 1); // Return the product of (largest - 1) * (second largest - 1)
    }
};

1582. Special Positions in a Binary Matrix

class Solution {
public:
    int numSpecial(vector<vector<int>>& mat) {
        int row = mat.size();
        int col = mat[0].size();
        int count = 0;

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(mat[i][j] == 1){
                    int rowSum = 0;
                    int colSum = 0;

                    // Check row
                    for(int k = 0; k < col; k++){
                        rowSum += mat[i][k];
                    }

                    // Check column
                    for(int k = 0; k < row; k++){
                        colSum += mat[k][j];
                    }

                    // If the sum in the row and column is 1 (current position is the only 1)
                    if(rowSum == 1 && colSum == 1){
                        count++;
                    }
                }
            }
        }
        return count;
    }
};


1486. XOR Operation in an Array

class Solution {
public:
    int xorOperation(int n, int start) {
        int arr[n];
        int ans = 0;
        for(int i = 0; i < n; i++){
            arr[i] = start + 2 * i;
            ans = ans ^ arr[i];
        }
        return ans;
    }
};


179. Largest Number

class Solution {
public:
    bool static compare(int a, int b){
        string s1 = to_string(a);
        string s2 = to_string(b);

        return s1+s2 > s2+s1;
    }

    string largestNumber(vector<int>& nums) {
        int n  = nums.size();
        sort(nums.begin(), nums.end(), compare);
        string ans;

        for(int i = 0; i < n; i++){
            ans = ans + to_string(nums[i]);
            
            //edge case:
            if(ans[0] == '0'){
                return "0";
            }
        }
        return ans;
    }
};

412. Fizz Buzz

class Solution {
public:
    vector<string> fizzBuzz(int n) {
       vector<string> ans;

        for(int i = 1; i <= n; i++){
            
            if(i % 3 == 0 && i % 5 == 0){
               ans.push_back("FizzBuzz");
            }
            else if(i % 3 == 0){
               ans.push_back("Fizz");
            }
            else if(i % 5 == 0){
               ans.push_back("Buzz");
            }
            else{
               ans.push_back(to_string(i));
            }
        } 
        return ans;
    }
};

1436. Destination City

class Solution {
public:
    string destCity(vector<vector<string>>& paths) {
      int n  = paths.size();

        unordered_map<string,vector<string>>indegree;
        
        for(auto ele:paths){
          indegree[ele[0]].push_back(ele[1]);
        }
        for(auto ele:paths){
          if(indegree[ele[0]].size() == 0) return ele[0];
          if(indegree[ele[1]].size() == 0) return ele[1];
        }
        return "null";
    }
};


242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
        //base case:
        if(s.size() != t.size()){
            return false;
        }
        int i = 0;
        int j = 0;

        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        while(i < s.size() && j < t.size()){
            if(s[i] != t[j]){
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
};


Code

1266. Minimum Time Visiting All Points

class Solution {
public:
    int minTimeToVisitAllPoints(vector<vector<int>>& points) {
        int n = points.size();
        int ans = 0;

        // start from (i=1) and take (i=0) as initial starting point...
        for(int i = 1; i < n; i++){
            ans += max(abs(points[i][0] - points[i-1][0]), abs(points[i][1] - points[i-1][1]));  // x-y
        }
        return ans;
    }
};

1913. Maximum Product Difference Between Two Pairs

class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
    sort(nums.begin(),nums.end());
    return nums[nums.size()-1]*nums[nums.size()-2]-nums[0]*nums[1];
    }
};

661. Image Smoother

class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int row = img.size();
        int col = img[0].size();

        vector<vector<int>> ans(row, vector<int>(col, 0));

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){

                int count = 1;
                int sum = img[i][j];

                if(j+1<col){
                    sum+=img[i][j+1];
                    count++;
                }

                if(i+1<row && j+1<col){
                    sum += img[i+1][j+1];
                    count++;
                }

                if(i+1<row){
                    sum+=img[i+1][j];
                    count++;
                }

                if(i+1<row && j-1>=0){
                    sum +=img[i+1][j-1];
                    count++;
                }

                if(j-1>=0){
                    sum+=img[i][j-1];
                    count++;
                }

                if(i-1>=0 && j-1>=0){
                    sum += img[i-1][j-1];
                    count++;
                }

                if(i-1>=0){
                    sum+=img[i-1][j];
                    count++;
                }

                if(i-1>=0 && j+1<col){
                    sum += img[i-1][j+1];
                    count++;
                }

                int average = sum/count;
                ans[i][j] = average;
            }
        }
        return ans;
    }
};

2706. Buy Two Chocolates

class Solution {
public:
    int buyChoco(vector<int>& prices, int money) {
        int n = prices.size();
        sort(prices.begin(), prices.end());

        for(int i = 0; i < n; i++){
            if(prices[i] + prices[i+1] <= money){
                return (money - (prices[0] + prices[1]));
            }
            else{
                return money;
            }
        }
        return money;
    }
};

29. Divide Two Integers

class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend == INT_MIN && divisor == -1){
            return INT_MAX;
        }
        return dividend/divisor;
    }
};

1637. Widest Vertical Area Between Two Points Containing No Points

class Solution {
public:
    int maxWidthOfVerticalArea(vector<vector<int>>& points) {
        sort(points.begin(), points.end());

        int ans = 0;
        for(int i = 1; i < points.size(); i++){
            ans = max(ans, points[i][0] - points[i-1][0]);
        }
        return ans;
    }
};

1422. Maximum Score After Splitting a String

class Solution {
public:
    int maxScore(string s) {
        int n = s.size();
        int maxi = 0;

        int count0 = 0;                 // 0 count
        for(int i = 0; i < n-1;i++){
            if(s[i] == '0'){
                count0++;
            }
            int count1 = 0;                 // 1 count
            for(int j = i+1; j < n; j++){
                if(s[j] == '1'){
                    count1++;
                }
            }
            
        int total = count0 + count1;   // 1 count + 0 count
        if(total > maxi){
            maxi = total;
        }    
    }
    return maxi;
    }
};

1496. Path Crossing

class Solution {
public:
    bool isPathCrossing(string path) {
        int n = path.size();
        set<pair<int, int>> s;
        int x = 0;
        int y = 0;

        s.insert({0, 0});
        for(int i = 0; i < n; i++){
            if(path[i] == 'N'){
                y++;
            }
            else if(path[i] == 'E'){
                x++;
            }
            else if(path[i] == 'S'){
                y--;
            }
            else if(path[i] == 'W'){
                x--;
            }
            
            if(s.count({x, y}) != 0){
                return true;
            }
            s.insert({x, y});
        }
        return false;
    }
};

1758. Minimum Changes To Make Alternating Binary String

class Solution {
public:
    int minOperations(string s) {
        int n = s.size();
        
        int matchCount = 0;
        int unmatchCount = 0;


        for(int i = 0; i < n; i++){
            if(s[i] - '0' == i%2){
                matchCount++;
            }
            else{
                unmatchCount++;
            }
        }
        return min(matchCount, unmatchCount);
    }
};

91. Decode Ways

class Solution {
public:
    int solve(int i, string &s, int &n, vector<int> &dp){
        if(i == n){
            return 1; // out of bound (>26)
        }
        if(s[i] == '0'){
            return 0;  // no split
        }
        if(dp[i] != -1){
            return dp[i];
        }

        int ans = solve(i+1, s, n, dp);

        if(i+1 < n){          // overflow check
            if(s[i] == '1' || (s[i] == '2' && s[i+1] <= '6')){   // 1_ or <=26 condition check
                ans += solve(i+2, s, n, dp);
            }   
        }
        return dp[i] = ans;
    }

    int numDecodings(string s) {
        int n = s.size();
        vector<int> dp(n+1, -1);

        return solve(0, s, n, dp);
    }
};

1155. Number of Dice Rolls With Target Sum

class Solution {
public:
    // (i) Recursion + Memoization:
    int solve(int dice, int face, int target, vector<vector<int>> &dp){
        //base case:
        if(target < 0){
            return 0;
        }
        if(dice == 0 && target != 0){
            return 0;
        }
        if(dice != 0 && dice == 0){
            return 0;
        }
        if(dice == 0 && target == 0){
            return 1;
        }

        if(dp[dice][target] != -1){
            return dp[dice][target];
        }

        int ans = 0;
        for(int i = 1; i <= face; i++){
            ans = (ans + solve(dice-1, face, target-i, dp)) % 1000000007;        
        }
        return dp[dice][target] = ans;
    }

    // (ii) Tabulation:
    int solveTab(int d, int f, int t){
    vector<vector<int>> dp(d + 1, vector<int> (t + 1, 0));
    dp[0][0] = 1;  //base case

    for(int dice = 1; dice <= d; dice++){
        for(int target = 1; target <= t; target++){

            int ans = 0;
            for(int i = 1; i <= f; i++){
                if(target - i >= 0){          //check for valid index
                    ans = (ans + dp[dice-1][target - i]) % 1000000007;        
                }
            }
            dp[dice][target] = ans;
        }
    }
    return dp[d][t];
}

    int numRollsToTarget(int n, int k, int target){
        vector<vector<int>> dp(n + 1, vector<int> (target + 1, -1));
        return solve(n, k, target, dp);


        return solveTab(n, k, target);
    }
};

1578. Minimum Time to Make Rope Colorful

class Solution {
public:
    int minCost(string colors, vector<int>& neededTime){
        int n = colors.size();
        int ans = 0;
        int prev = 0;

        for(int i = 1; i < n; i++){
            if(colors[prev] != colors[i]){
                prev = i;
            }
            else{
                if(neededTime[prev] <= neededTime[i]){
                    ans = ans + neededTime[prev];
                    prev = i;
                }
                else{
                    ans = ans + neededTime[i];
                }
            }
        }
        return ans;
    }
};

383. Ransom Note

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        unordered_map<char, int> map;

        for(auto i : magazine){
            map[i]++;
        }
        for(auto i : ransomNote){
            map[i]--;

            if(map[i] < 0){
                return false;
            }
        }
        return true;
    }
};

1335. Minimum Difficulty of a Job Schedule

class Solution {
public:
    int solve(vector<int> &jobd, int n, int i, int d, vector<vector<int>> & dp){
        //base case: (1 day only)
        if(d == 1){
            return *max_element(begin(jobd)+i, end(jobd));
        }
        if(dp[i][d] != -1){
            return dp[i][d];
        }

        int ans = INT_MAX;    // as min needed
        int currD = INT_MIN;  // as max needed

        for(int j = i; j <= n-d; j++){
            currD = max(currD, jobd[j]);
            ans = min(ans, currD + solve(jobd, n, j+1, d-1, dp));
        }
        dp[i][d] = ans;
        return dp[i][d];
    }

    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int n = jobDifficulty.size();

        vector<vector<int>> dp(n+1, vector<int> (d+1, -1));

        if(n < d){
            return -1;
        }
        return solve(jobDifficulty, n, 0, d, dp);
    }
};

1897. Redistribute Characters to Make All Strings Equal

class Solution {
public:
    bool makeEqual(vector<string>& words) {
        // Create an unordered map to store the frequency of each character.
        unordered_map<char, int> map;
        
        // Get the total number of strings in the vector.
        int n = words.size();
        
        // Loop through each string in the vector.
        for (auto s : words) {
            // Loop through each character in the current string.
            for (auto c : s) {
                // Increment the frequency of the character in the map.
                map[c]++;
            }
        }
        // Check if the frequency of each character is a multiple of the total number of strings.
        for (auto i : map) {
            if (i.second % n) {
                // If any character's frequency is not a multiple of n, return false.
                return false;
            }
        }
        return true;
    }
};




class Solution {
public:
    int maxLengthBetweenEqualCharacters(string s) {
        
        unordered_map<char,int>mp;
        int ans = -1;

        for(int i =0;i<s.size();i++){

            if(mp.find(s[i])!=mp.end()){
                ans = max(ans,i-mp[s[i]]-1);
            }
            else{
                mp[s[i]]=i;
            }
        }
        return ans;
    }
};

2264. Largest 3-Same-Digit Number in String

class Solution {
public:
    std::string largestGoodInteger(string num) {
        char com;
        int left = 0;
        int right = 0;
        for (int i = 0; i < num.length() - 2; i++) {
            if (num[i] == num[i + 1] && num[i + 1] == num[i + 2]) {
                if (com <= num[i]) {
                    left = i;
                    right = i + 2;
                    com = num[i];
                }
            }
        }
        if(com)
            return num.substr(left, 3);
        return "";
    }
};

2610. Convert an Array Into a 2D Array With Conditions

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        int n = nums.size();

        vector<vector<int>> ans;
        vector<int> freq(n+1);

        for(int i : nums){
            if(freq[i] >= ans.size()){
                ans.push_back({});
            }
                ans[freq[i]].push_back(i);
                freq[i]++;
            
        }
        return ans;
    }
};

2870. Minimum Number of Operations to Make Array Empty

class Solution {
public:
    int minOperations(vector<int>& nums) {
        unordered_map<int, int> m;
        for(int num : nums){
            m[num]++;
        }

        int ans = 0;
        for(auto [ele, cnt] : m){
            if(cnt == 1){
                return -1;
            }
            else{
                ans += (cnt/3) + (cnt % 3 > 0);
            }
        }
    return ans;
    }
};

300. Longest Increasing Subsequence

class Solution {
public:
    int solve(vector<int>& nums, int n, int curr, int prev, vector<vector<int>> &dp){
        //base case:
        if(curr == n){
            return 0;
        }
        if(dp[curr][prev+1] != -1){
            return dp[curr][prev+1];
        }
        //including:
        int include = 0;
        if(prev == -1 || nums[curr] > nums[prev]){
            include = 1 + solve(nums, n, curr+1, curr, dp);
        }
        //excluding:
        int exclude = 0 + solve(nums, n, curr+1, prev, dp);

        return dp[curr][prev+1] = max(include, exclude);
    }

    int solveTab(vector<int> &nums, int n){
        vector<vector<int>> dp(n+1, vector<int> (n+1, 0));
        
        for(int curr = n-1; curr >=0; curr--){
            for(int prev = curr - 1; prev >= -1; prev --){
                //including:
                int include = 0;
                    if(prev == -1 || nums[curr] > nums[prev]){
                        include = 1 + dp[curr+1][curr+1];
                    }
                //excluding:
                int exclude = 0 + dp[curr+1][prev+1];

                dp[curr][prev+1] = max(include, exclude);
            }
        }
    return dp[0][0];
}

    int lengthOfLIS(vector<int>& nums){
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int> (n+1, -1));
        return solve(nums, n, 0, -1, dp);

        return solveTab(nums, n);
    }
};

67. Add Binary

class Solution {
public:
    string addBinary(string a, string b) {
        int alen = a.size();
        int blen = b.size();
        int i = 0;
        int carry = 0;
        string ans ="";

        while(i<alen || i<blen || carry!=0){
            int x =0;
            if(i<alen && a[alen-i-1] == '1'){
                x=1;
            }
            int y =0;
            if(i<blen and b[blen-i-1] =='1'){
                y =1;
            }
            ans = to_string((x+y+carry)%2)+ans;
            carry= (x+y+carry)/2;
            i+=1;

        }
        return ans;
    }
};

278. First Bad Version

// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        long long int start = 0;
        long long int end = n;
        long long int minBadVersion;

        while(start <= end){
            long long int mid = start + (end - start) / 2;

            if(isBadVersion(mid)){
                minBadVersion = mid;
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
    return minBadVersion;
    }
};

938. Range Sum of BST

class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root == NULL){
            return 0;
        }

        int currentVal = (root->val >= low && root->val <= high) ? root->val : 0;

        int leftSum = rangeSumBST(root->left, low, high);
        int rightSum = rangeSumBST(root->right, low, high);

        int rangeSum = currentVal + leftSum + rightSum;

        return rangeSum;

    }
};

872. Leaf-Similar Trees

class Solution {
public:
    void inOrder(TreeNode* root, string &s){
        if(root == NULL){
            return;
        }
        //leaf node:
        if(root->left == NULL && root->right == NULL){
            s += to_string(root->val) + "_";
            return;
        }
        inOrder(root->left, s);
        inOrder(root->right, s);
    }

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        string s1 = "";
        string s2 = "";

        inOrder(root1, s1);
        inOrder(root2, s2);

        if(s1 == s2){
            return true;
        }
        else{
            return false;
        }
    }
};


2385. Amount of Time for Binary Tree to Be Infected

class Solution {
public:
    TreeNode* createParentMapping(TreeNode* root, int start, map<TreeNode*, TreeNode*>& nodeToParent) {
        TreeNode* result = NULL;
        queue<TreeNode*> q;
        q.push(root);
        nodeToParent[root] = NULL;

        while (!q.empty()) {
            TreeNode* front = q.front();
            q.pop();
            if (front->val == start) {
                result = front;
            }
            if (front->left) {
                nodeToParent[front->left] = front;
                q.push(front->left);
            }
            if (front->right) {
                nodeToParent[front->right] = front;
                q.push(front->right);
            }
        }
        return result;
    }

    int burnTree(TreeNode* root, map<TreeNode*, TreeNode*>& nodeToParent) {
        map<TreeNode*, bool> visited;
        queue<TreeNode*> q;
        q.push(root);
        visited[root] = true;
        int ans = 0;

        while (!q.empty()) {
            bool flag = false;
            int size = q.size();

            for (int i = 0; i < size; i++) {
                TreeNode* front = q.front();
                q.pop();

                if (front->left && !visited[front->left]) {
                    flag = true;
                    q.push(front->left);
                    visited[front->left] = true;
                }
                if (front->right && !visited[front->right]) {
                    flag = true;
                    q.push(front->right);
                    visited[front->right] = true;
                }
                if (nodeToParent[front] && !visited[nodeToParent[front]]) {
                    flag = true;
                    q.push(nodeToParent[front]);
                    visited[nodeToParent[front]] = true;
                }
            }
            if (flag) {
                ans++;
            }
        }
        return ans;
    }

    int amountOfTime(TreeNode* root, int start) {
        map<TreeNode*, TreeNode*> nodeToParent;
        TreeNode* targetNode = createParentMapping(root, start, nodeToParent);
        int ans = burnTree(targetNode, nodeToParent);
        return ans;
    }
};

1026. Maximum Difference Between Node and Ancestor

class Solution {
public:
    void solve(TreeNode* root, int maxi, int mini, int &ans){
        if(root == NULL){
            return;
        }

        maxi = max(maxi, root->val);
        mini = min(mini, root->val);
        ans = max(ans, maxi-mini);

        solve(root->left, maxi, mini, ans);
        solve(root->right, maxi, mini, ans);
    }

    int maxAncestorDiff(TreeNode* root) {
        int ans = INT_MIN;
        solve(root, root->val, root->val, ans);
        return ans;
    }
};

1704. Determine if String Halves Are Alike

class Solution {
public:
    bool halvesAreAlike(string s) {
        int start = 0;
        int end = s.size()-1;
        int cnt1 = 0;   // counts no of vowels in left half
        int cnt2 = 0;  // counts no of vowels in right half

        while(start < end){
            if(s[start]=='a' || s[start]=='e' || s[start]=='i'||s[start]=='o'||s[start]=='u' ||
               s[start]=='A' || s[start]=='E' || s[start]=='I'||s[start]=='O'||s[start]=='U'){
                   
                   cnt1++;  // left++
               }
            if(s[end]=='a' || s[end]=='e' || s[end]=='i'||s[end]=='o'||s[end]=='u' ||
               s[end]=='A' || s[end]=='E' || s[end]=='I'||s[end]=='O'||s[end]=='U'){

                   cnt2++; // right++
               }
            start++;
            end--;
        }
        if(cnt1 == cnt2){
            return true;
        }
        else{
            return false;
        }
    }
};

217. Contains Duplicate

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();

        for(int i = 0; i < n-1; i++){
            if(nums[i] == nums[i+1]){
                return true;
            } 
        }
        return false;
    }
};

203. Remove Linked List Elements

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        //base case:
        if(head == NULL){
           return head;
        }

        ListNode* address = removeElements(head->next, val);

        if(head->val == val){
            return address;
        }
        
        head->next = address;
        return head;     

    }
};


116. Populating Next Right Pointers in Each Node

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL){
            return NULL;
        }
        // Connect left node with right node:
        if(root->left != NULL){
            root->left->next = root->right;
        }
        // Connect node's right child with next node's left child:
        if(root->right != NULL && root->next != NULL){
            root->right->next = root->next->left;
        }
        // Join Subtrees:
        connect(root->left);
        connect(root->right);

        return root;
    }
};


832. Flipping an Image

class Solution {
public:
    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& image){

        int n = image.size();
        vector<vector<int>> ans = image;

        for(int i=0;i<n;i++) {

            reverse(ans[i].begin(), ans[i].end());

            for(int j=0;j<n;j++) {

                if(ans[i][j] == 0){
                    ans[i][j] = 1;
                }
                else{
                    ans[i][j] = 0;
                }
            }
        }
        return ans;
    }
};

263. Ugly Number

class Solution {
public:
    bool isUgly(int n) {

        if(n <= 0){
            return false;
        }
        
        while( n > 0){
            if (n == 1){
                return true;
            }
            if(n % 2 == 0){
                n = n/2;
            }
            else if(n % 3 == 0){
                n = n/3;
            }
            else if(n % 5 == 0){
                n = n/5;
            }
            else{
                return false;
            }
        }
        return true;
    }
};

1143. Longest Common Subsequence

class Solution {
public:
    //(i) Recursion + Memoization:

    int solve(string &a, string &b, int i, int j, vector<vector<int>> &dp){
        //base case: (out of string)
        if(i == a.size() || j == b.size()){
            return 0;
        }

        //dp condtion:
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int ans = 0;

        //case1: matching
        if(a[i] == b[j]){
            ans = 1 + solve(a, b, i+1, j+1, dp);
        }
        //case2: not-matching:
        else{
            ans = 0 + max(solve(a, b, i+1, j, dp), solve(a, b, i, j+1, dp));
        }
        return dp[i][j] = ans;
    }

    //(ii) Tabulation:

    int solveTab(string &a, string &b){
        vector<vector<int>> dp(a.size()+1, vector<int> (b.size()+1, 0));    

        for(int i = a.size() - 1; i >=0; i--){
            for(int j = b.size() - 1; j >= 0; j--){
                    int ans = 0;
                    //case1: matching
                    if(a[i] == b[j]){
                        ans = 1 + dp[i+1][j+1];
                    }
                    //case2: not-matching:
                    else{
                        ans = 0 + max(dp[i+1][j], dp[i][j+1]);
                    }
                dp[i][j] = ans;
            }
        }
        return dp[0][0];
    }

    int longestCommonSubsequence(string text1, string text2) {
        //(i) Recursion + Memoization:
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n, vector<int> (m, -1));
        return solve(text1, text2, 0, 0, dp);

        //(ii) Tabulation:
        return solveTab(text1, text2);
    }
};

1512. Number of Good Pairs

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        unordered_map<int, int> m;
        int ans = 0;

        for(int i : nums){
            ans = ans + m[i];
            m[i]++;
        }
        return ans;
    }
};

1356. Sort Integers by The Number of 1 Bits

class Solution {
public:
    static bool comprator(int a, int b){
        int x1 = __builtin_popcount(a);
        int x2 = __builtin_popcount(b);

        if(x1 != x2){
            return x1 < x2;
        }
        else{
            return a < b;
        }
    }
    vector<int> sortByBits(vector<int>& arr) {
        sort(arr.begin(), arr.end(), comprator);
        return arr;
    }
};



232. Implement Queue using Stacks

class MyQueue
{
    private:
        stack<int> stack1;
        stack<int> stack2;

    public:
        MyQueue()
        {
            
        }
        
        void push(int x)
        {
            while(!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }

            stack2.push(x);

            while(!stack2.empty())
            {
                stack1.push(stack2.top());
                stack2.pop();
            }
        }
        
        int pop()
        {
            int top = stack1.top();
            stack1.pop();

            return top;
        }
        
        int peek()
        {
            return stack1.top();
        }
        
        bool empty()
        {
            return (stack1.empty() && stack2.empty());
        }
};

739. Daily Temperatures

class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        int n = temperatures.size();
        vector<int> ans(n);
        stack<int> stk;

        for(int i = 0; i < n; i++){
            while(!stk.empty() && temperatures[i] > temperatures[stk.top()]){
                int idx = stk.top();
                stk.pop();
                ans[idx] = i - idx;
            }
            stk.push(i);
        }
        return ans;
    }
};


2974. Minimum Number Game

class Solution {
public:
    vector<int> numberGame(vector<int>& nums) {
        if (nums.size()==0) return {};

        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i+=2){
            swap(nums[i], nums[i+1]);
        }
        return nums;
    }
};

