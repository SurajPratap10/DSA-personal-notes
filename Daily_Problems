1688. Count of Matches in Tournament

class Solution {
public:
    int numberOfMatches(int n) {
        // (i) Baby Solution:

        // return n-1;



        // (ii) Math Approach:

        if(n == 1){
            return 0;
        }
        if(n % 2 == 0){
            return n/2 + numberOfMatches(n/2);
        }
        else{
            return (n-1)/2 + numberOfMatches((n-1)/2 + 1);
        }
    }
};

2951. Find the Peaks

class Solution {
public:
    vector<int> findPeaks(vector<int>& mountain) {
        int n = mountain.size();
        vector<int> ans;
        for(int i = 1; i < n-1; i++){
            if(mountain[i] > mountain[i-1] && mountain[i] > mountain[i+1]){
                ans.push_back(i);
            }
        }
        return ans;
    }
};


1716. Calculate Money in Leetcode Bank

class Solution {
public:
    int totalMoney(int n) {
        int sum = 0;
        vector<int> dp(n+1);

        //base case:
        dp[0] = 0;

        for(int i = 1; i <=n; i++){
            if(i <= 7){
                dp[i] = 1 + dp[i-1];
            }
            else{
                dp[i] = 1 + dp[i-7];
            }
        }
        for(int nums : dp){
            sum = sum + nums;
        }
        return sum;
    }
};
